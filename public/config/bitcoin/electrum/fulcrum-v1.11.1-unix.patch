--- a/src/BitcoinD.cpp
+++ b/src/BitcoinD.cpp
@@ -396,7 +396,7 @@
             bool badFormat = !reply.result().canConvert<QVariantList>();
             for (const auto &var : reply.result().toList()) {
                 const auto obj = var.toMap();
-                QString type, addr;
+                QString type, addr, transport;
                 if (obj.isEmpty() || (type = obj.value("type").toString()).isEmpty() || (addr = obj.value("address").toString()).isEmpty()) {
                     badFormat = true;
                     continue;
@@ -410,6 +410,7 @@
                 } else
                     Warning() << "getzmqnotifications: unknown zmq notification type \"" << type << "\"";
                 if (addr.startsWith("tcp://")) {
+                    transport = "TCP";
                     const QString hostPortPart = addr.mid(6).split("/").front(); // in case there are trailing slashes?
                     try {
                         auto [host, port] = Util::ParseHostPortPair(hostPortPart);
@@ -427,6 +428,28 @@
                         badFormat = true;
                         continue; // skip this one -- it will likely confuse libzmq
                     }
+                } else if (addr.startsWith("ipc://")) {
+                    transport = "unix domain";
+
+                    QString socketPath = addr.mid(6);
+                    QString errMsg;
+
+                    // Core and/or Knots may have left extra slashes at the front of the string. Trim and leave only 1.
+                    for (QString left2; (left2 = socketPath.left(2)) == "//" || left2 == R"(/\)"; /* */)
+                        socketPath = socketPath.mid(1); // pop first slash and keep looping
+
+                    if (socketPath.isEmpty())
+                        errMsg = "Socket path is empty";
+                    else if (!QFileInfo::exists(socketPath))
+                        errMsg = "Socket does not exist: " + socketPath;
+
+                    if (!errMsg.isEmpty()) {
+                        Error() << "failed to validate zmq notification address: " << addr << " (" << errMsg << ")";
+                        badFormat = true;
+                        continue; // skip this one -- it will likely confuse libzmq
+                    }
+                    // rewrite it to normalized form (trimmed of any extra slashes at front)
+                    addr = "ipc://" + socketPath;
                 } else {
                     Warning() << "getzmqnotifications: unknown endpoint protocol " << addr << " for type " << type;
                     badFormat = true;
@@ -435,6 +458,7 @@

                 // if we get here, safe to add to our map
                 zmqs.insert(type, addr);
+                DebugM("getzmqnotifications: added ", transport, " socket address: ", addr);
             }
             if (badFormat)
                 Error() << "getzmqnotifications: query to bitcoind returned a result in an unexpected format";